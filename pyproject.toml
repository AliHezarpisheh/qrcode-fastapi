[tool.poetry]
name = "qrcode-fastapi"
version = "0.1.0"
description = "FastAPI application dynamically generates QR codes based on user input."
authors = ["alihezarpisheh <alihezarpisheh@outlook.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
ruff = "^0.3.7"
mypy = "^1.9.0"
isort = "^5.13.2"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-randomly = "^3.15.0"
pytest-repeat = "^0.9.3"
pytest-xdist = "^3.5.0"
pytest-sugar = "^1.0.0"
fastapi = "^0.110.1"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
tomlkit = "^0.12.4"
segno = "^1.6.1"
pre-commit = "^3.7.0"
pillow = "^10.3.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
line-length = 88
lint.select = [
    "E",  # pycodestyle
    "W",  # pycodestyle
    "F",  # pyflakes
    "UP",  # pyupgrade
    "C90",  # mccabe
    "D",  # pydocstyle
    "I",  # isort
    "RUF",  # Ruff specific rules
]
lint.ignore = ["D104"]

lint.fixable = [
    "F401",  # Remove unused imports.
    "RUF100",  # Remove unused noqa comments.
]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"


[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true


[tool.mypy]
strict = true
ignore_missing_imports = true


[tool.pytest.ini_options]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
    "-v",
]
markers = [
    "smoke: Tests focusing on essential and critical functionality",
    "exception: Tests checking how the application handles exceptions and error scenarios",
    "asyncio: Asynchronous tests using the pytest-asyncio plugin",
]
required_plugins = [
    "pytest-xdist",
    "pytest-repeat",
    "pytest-randomly",
    "pytest-cov",
    "pytest-sugar",
]

testpaths = "tests"
xfail_strict = true


[tool.coverage.run]
parallel = true
source = [
    "config",
    "toolkit",
    "src",
]
